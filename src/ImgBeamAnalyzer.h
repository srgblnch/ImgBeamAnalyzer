//=============================================================================
//
// file :        ImgBeamAnalyzer.h
//
// description : Include for the ImgBeamAnalyzer class.
//
// project :	Image Analyzer
//
// $Author: julien_malik $
//
// $Revision: 1.4 $
//
// $Log: not supported by cvs2svn $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _IMGBEAMANALYZER_H
#define _IMGBEAMANALYZER_H

//using namespace Tango;

/**
 * @author	$Author: julien_malik $
 * @version	$Revision: 1.4 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------
#ifdef WIN32
#  pragma warning (disable : 4786)
#endif

#include "BIATask.h"
#include "BIAConfig.h"

#include <tango.h>

namespace ImgBeamAnalyzer_ns
{

const size_t kTIMEOUT_MESSAGE_MS = 2500;

/**
 * Class Description:
 * The device analyzes images accessible on another remote device,
 *	and proposes the following (selectable) features :
 *	- in preprocessing : rotation, mirroring, gamma correction
 *	- ROI (Region Of Interest), either user-defined or automatic by blob analysis
 *	- image moments (mean intensity, centroid, variance, skew)
 *	- maximal intensity (to monitor saturation for example)
 *	- ellipse fitting when automatic ROI is desired
 *	- profiles with corresponding gaussian fit
 *	- 2D gaussian fit of the image
 */

/*
 *	Device States Description:
 *  Tango::FAULT :    an error has been caught either :
 *                    - at initialisation
 *                    - when reading the image attribute in the corresponding remote device
 *                    - when configuring
 *                    - when processing the image
 *  Tango::RUNNING :  the device is correctly initialized, configured, and is currently analysing images
 *  Tango::STANDBY :  the device is ready for processing and is waiting.
 *                    In 'CONTINUOUS' mode, it waits for the START command to begin analysis
 *                    In 'ONESHOT' mode, it waits either for the PROCESS command if a remote device is specified,
 *                    either for the InputImage attribute to be written
 */


class ImgBeamAnalyzer: public Tango::Device_3Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevBoolean	*attr_EnableImageStats_read;
		Tango::DevBoolean	attr_EnableImageStats_write;
		Tango::DevBoolean	*attr_EnableProfiles_read;
		Tango::DevBoolean	attr_EnableProfiles_write;
		Tango::DevBoolean	*attr_EnableUserROI_read;
		Tango::DevBoolean	attr_EnableUserROI_write;
		Tango::DevBoolean	*attr_EnableAutoROI_read;
		Tango::DevBoolean	attr_EnableAutoROI_write;
		Tango::DevBoolean	*attr_Enable2DGaussianFit_read;
		Tango::DevBoolean	attr_Enable2DGaussianFit_write;
		Tango::DevLong	*attr_ComputationPeriod_read;
		Tango::DevLong	attr_ComputationPeriod_write;
		Tango::DevLong	*attr_EstimComputTime_read;
		Tango::DevLong	*attr_Rotation_read;
		Tango::DevLong	attr_Rotation_write;
		Tango::DevBoolean	*attr_HorizontalFlip_read;
		Tango::DevBoolean	attr_HorizontalFlip_write;
		Tango::DevLong	*attr_BitsPerPixel_read;
		Tango::DevLong	attr_BitsPerPixel_write;
		Tango::DevDouble	*attr_GammaCorrection_read;
		Tango::DevDouble	attr_GammaCorrection_write;
		Tango::DevDouble	*attr_Threshold_read;
		Tango::DevDouble	attr_Threshold_write;
		Tango::DevDouble	*attr_AutoROIMagFactor_read;
		Tango::DevDouble	attr_AutoROIMagFactor_write;
		Tango::DevLong	*attr_AlarmZone_read;
		Tango::DevLong	attr_AlarmZone_write;
		Tango::DevDouble	*attr_PixelSize_read;
		Tango::DevDouble	attr_PixelSize_write;
		Tango::DevLong	*attr_UserROIOriginX_read;
		Tango::DevLong	attr_UserROIOriginX_write;
		Tango::DevLong	*attr_UserROIOriginY_read;
		Tango::DevLong	attr_UserROIOriginY_write;
		Tango::DevLong	*attr_UserROIWidth_read;
		Tango::DevLong	attr_UserROIWidth_write;
		Tango::DevLong	*attr_UserROIHeight_read;
		Tango::DevLong	attr_UserROIHeight_write;
		Tango::DevLong	*attr_AutoROIOriginX_read;
		Tango::DevLong	*attr_AutoROIOriginY_read;
		Tango::DevLong	*attr_AutoROIWidth_read;
		Tango::DevLong	*attr_AutoROIHeight_read;
		Tango::DevLong	*attr_NbNoiseImage_read;
		Tango::DevUShort	*attr_InputImage_read;
		Tango::DevUShort	attr_InputImage_write;
		Tango::DevUShort	*attr_ROIImage_read;
		Tango::DevUShort	*attr_MeanNoiseImage_read;
		Tango::DevUChar	*attr_ThresholdedImage_read;
		Tango::DevDouble	*attr_MaxIntensity_read;
		Tango::DevDouble	*attr_MeanIntensity_read;
		Tango::DevDouble	*attr_CentroidX_read;
		Tango::DevDouble	*attr_CentroidY_read;
		Tango::DevDouble	*attr_VarianceX_read;
		Tango::DevDouble	*attr_VarianceY_read;
		Tango::DevDouble	*attr_CovarianceXY_read;
		Tango::DevDouble	*attr_CorrelationXY_read;
		Tango::DevDouble	*attr_SkewX_read;
		Tango::DevDouble	*attr_SkewY_read;
		Tango::DevDouble	*attr_SkewX2Y_read;
		Tango::DevDouble	*attr_SkewXY2_read;
		Tango::DevDouble	*attr_EllipseCentroidX_read;
		Tango::DevDouble	*attr_EllipseCentroidY_read;
		Tango::DevDouble	*attr_EllipseMajorAxis_read;
		Tango::DevDouble	*attr_EllipseMinorAxis_read;
		Tango::DevDouble	*attr_EllipseTilt_read;
		Tango::DevDouble	*attr_XProfile_read;
		Tango::DevDouble	*attr_XProfileFitted_read;
		Tango::DevDouble	*attr_XProfileError_read;
		Tango::DevDouble	*attr_XProfileCenter_read;
		Tango::DevDouble	*attr_XProfileMag_read;
		Tango::DevDouble	*attr_XProfileSigma_read;
		Tango::DevDouble	*attr_XProfileFWHM_read;
		Tango::DevDouble	*attr_XProfileBG_read;
		Tango::DevDouble	*attr_XProfileChi2_read;
		Tango::DevDouble	*attr_YProfile_read;
		Tango::DevDouble	*attr_YProfileFitted_read;
		Tango::DevDouble	*attr_YProfileError_read;
		Tango::DevDouble	*attr_YProfileCenter_read;
		Tango::DevDouble	*attr_YProfileMag_read;
		Tango::DevDouble	*attr_YProfileSigma_read;
		Tango::DevDouble	*attr_YProfileFWHM_read;
		Tango::DevDouble	*attr_YProfileBG_read;
		Tango::DevDouble	*attr_YProfileChi2_read;
		Tango::DevDouble	*attr_GaussianFitMagnitude_read;
		Tango::DevDouble	*attr_GaussianFitCenterX_read;
		Tango::DevDouble	*attr_GaussianFitCenterY_read;
		Tango::DevDouble	*attr_GaussianFitVarianceX_read;
		Tango::DevDouble	*attr_GaussianFitVarianceY_read;
		Tango::DevDouble	*attr_GaussianFitCovarianceXY_read;
		Tango::DevDouble	*attr_GaussianFitMajorAxisFWHM_read;
		Tango::DevDouble	*attr_GaussianFitMinorAxisFWHM_read;
		Tango::DevDouble	*attr_GaussianFitTilt_read;
		Tango::DevDouble	*attr_GaussianFitBG_read;
		Tango::DevDouble	*attr_GaussianFitChi2_read;
		Tango::DevDouble	*attr_GaussianFitParameterCovariance_read;
		Tango::DevLong	*attr_Fit2DNbIterMax_read;
		Tango::DevLong	attr_Fit2DNbIterMax_write;
		Tango::DevDouble	*attr_Fit2DMaxRelChange_read;
		Tango::DevDouble	attr_Fit2DMaxRelChange_write;
		Tango::DevLong	*attr_Fit1DNbIterMax_read;
		Tango::DevLong	attr_Fit1DNbIterMax_write;
		Tango::DevDouble	*attr_Fit1DMaxRelChange_read;
		Tango::DevDouble	attr_Fit1DMaxRelChange_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	initial value of AutoROIMagFactor attribute. if not defined, it is set to 1
 */
	Tango::DevDouble	autoROIMagFactor;
/**
 *	if set to 'true' and mode is 'CONTINUOUS', the computation starts automatically when the device is launched
 */
	Tango::DevBoolean	autoStart;
/**
 *	the initial value of the ComputationPeriod attribute
 */
	Tango::DevLong	computationPeriod;
/**
 *	the initial value of the Enable2DGaussianFit attribute
 */
	Tango::DevBoolean	enable2DGaussianFit;
/**
 *	the initial value of the EnableAutoROI attribute
 */
	Tango::DevBoolean	enableAutoROI;
/**
 *	the initial value of the EnableImageStats attribute
 */
	Tango::DevBoolean	enableImageStats;
/**
 *	the initial value of the EnableProfiles attribute
 */
	Tango::DevBoolean	enableProfiles;
/**
 *	the initial value of the EnableUserROI attribute
 */
	Tango::DevBoolean	enableUserROI;
/**
 *	the name of the image attribute to take in ImageDevice
 */
	string	imageAttributeName;
/**
 *	the device from which the image is taken
 */
	string	imageDevice;
/**
 *	ONESHOT or CONTINUOUS
 */
	string	mode;
/**
 *	the initial value of the PixelSize attribute
 */
	Tango::DevDouble	pixelSize;
/**
 *	the initial value of the Rotation attribute
 */
	Tango::DevLong	rotation;
/**
 *	the initial value of the HorizontalFlip attribute
 */
	Tango::DevBoolean	horizontalFlip;
/**
 *	the initial value of the GammaCorrection attribute
 */
	Tango::DevDouble	gammaCorrection;
/**
 *	the initial value of the BitsPerPixel attribute
 */
	Tango::DevLong	bitsPerPixel;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	ImgBeamAnalyzer(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	ImgBeamAnalyzer(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	ImgBeamAnalyzer(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~ImgBeamAnalyzer() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name ImgBeamAnalyzer methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for EnableImageStats acquisition result.
 */
	virtual void read_EnableImageStats(Tango::Attribute &attr);
/**
 *	Write EnableImageStats attribute values to hardware.
 */
	virtual void write_EnableImageStats(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for EnableProfiles acquisition result.
 */
	virtual void read_EnableProfiles(Tango::Attribute &attr);
/**
 *	Write EnableProfiles attribute values to hardware.
 */
	virtual void write_EnableProfiles(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for EnableUserROI acquisition result.
 */
	virtual void read_EnableUserROI(Tango::Attribute &attr);
/**
 *	Write EnableUserROI attribute values to hardware.
 */
	virtual void write_EnableUserROI(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for EnableAutoROI acquisition result.
 */
	virtual void read_EnableAutoROI(Tango::Attribute &attr);
/**
 *	Write EnableAutoROI attribute values to hardware.
 */
	virtual void write_EnableAutoROI(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Enable2DGaussianFit acquisition result.
 */
	virtual void read_Enable2DGaussianFit(Tango::Attribute &attr);
/**
 *	Write Enable2DGaussianFit attribute values to hardware.
 */
	virtual void write_Enable2DGaussianFit(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for ComputationPeriod acquisition result.
 */
	virtual void read_ComputationPeriod(Tango::Attribute &attr);
/**
 *	Write ComputationPeriod attribute values to hardware.
 */
	virtual void write_ComputationPeriod(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for EstimComputTime acquisition result.
 */
	virtual void read_EstimComputTime(Tango::Attribute &attr);
/**
 *	Extract real attribute values for Rotation acquisition result.
 */
	virtual void read_Rotation(Tango::Attribute &attr);
/**
 *	Write Rotation attribute values to hardware.
 */
	virtual void write_Rotation(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for HorizontalFlip acquisition result.
 */
	virtual void read_HorizontalFlip(Tango::Attribute &attr);
/**
 *	Write HorizontalFlip attribute values to hardware.
 */
	virtual void write_HorizontalFlip(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for BitsPerPixel acquisition result.
 */
	virtual void read_BitsPerPixel(Tango::Attribute &attr);
/**
 *	Write BitsPerPixel attribute values to hardware.
 */
	virtual void write_BitsPerPixel(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for GammaCorrection acquisition result.
 */
	virtual void read_GammaCorrection(Tango::Attribute &attr);
/**
 *	Write GammaCorrection attribute values to hardware.
 */
	virtual void write_GammaCorrection(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Threshold acquisition result.
 */
	virtual void read_Threshold(Tango::Attribute &attr);
/**
 *	Write Threshold attribute values to hardware.
 */
	virtual void write_Threshold(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for AutoROIMagFactor acquisition result.
 */
	virtual void read_AutoROIMagFactor(Tango::Attribute &attr);
/**
 *	Write AutoROIMagFactor attribute values to hardware.
 */
	virtual void write_AutoROIMagFactor(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for AlarmZone acquisition result.
 */
	virtual void read_AlarmZone(Tango::Attribute &attr);
/**
 *	Write AlarmZone attribute values to hardware.
 */
	virtual void write_AlarmZone(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for PixelSize acquisition result.
 */
	virtual void read_PixelSize(Tango::Attribute &attr);
/**
 *	Write PixelSize attribute values to hardware.
 */
	virtual void write_PixelSize(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for UserROIOriginX acquisition result.
 */
	virtual void read_UserROIOriginX(Tango::Attribute &attr);
/**
 *	Write UserROIOriginX attribute values to hardware.
 */
	virtual void write_UserROIOriginX(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for UserROIOriginY acquisition result.
 */
	virtual void read_UserROIOriginY(Tango::Attribute &attr);
/**
 *	Write UserROIOriginY attribute values to hardware.
 */
	virtual void write_UserROIOriginY(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for UserROIWidth acquisition result.
 */
	virtual void read_UserROIWidth(Tango::Attribute &attr);
/**
 *	Write UserROIWidth attribute values to hardware.
 */
	virtual void write_UserROIWidth(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for UserROIHeight acquisition result.
 */
	virtual void read_UserROIHeight(Tango::Attribute &attr);
/**
 *	Write UserROIHeight attribute values to hardware.
 */
	virtual void write_UserROIHeight(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for AutoROIOriginX acquisition result.
 */
	virtual void read_AutoROIOriginX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for AutoROIOriginY acquisition result.
 */
	virtual void read_AutoROIOriginY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for AutoROIWidth acquisition result.
 */
	virtual void read_AutoROIWidth(Tango::Attribute &attr);
/**
 *	Extract real attribute values for AutoROIHeight acquisition result.
 */
	virtual void read_AutoROIHeight(Tango::Attribute &attr);
/**
 *	Extract real attribute values for NbNoiseImage acquisition result.
 */
	virtual void read_NbNoiseImage(Tango::Attribute &attr);
/**
 *	Extract real attribute values for InputImage acquisition result.
 */
	virtual void read_InputImage(Tango::Attribute &attr);
/**
 *	Write InputImage attribute values to hardware.
 */
	virtual void write_InputImage(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for ROIImage acquisition result.
 */
	virtual void read_ROIImage(Tango::Attribute &attr);
/**
 *	Extract real attribute values for MeanNoiseImage acquisition result.
 */
	virtual void read_MeanNoiseImage(Tango::Attribute &attr);
/**
 *	Extract real attribute values for ThresholdedImage acquisition result.
 */
	virtual void read_ThresholdedImage(Tango::Attribute &attr);
/**
 *	Extract real attribute values for MaxIntensity acquisition result.
 */
	virtual void read_MaxIntensity(Tango::Attribute &attr);
/**
 *	Extract real attribute values for MeanIntensity acquisition result.
 */
	virtual void read_MeanIntensity(Tango::Attribute &attr);
/**
 *	Extract real attribute values for CentroidX acquisition result.
 */
	virtual void read_CentroidX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for CentroidY acquisition result.
 */
	virtual void read_CentroidY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for VarianceX acquisition result.
 */
	virtual void read_VarianceX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for VarianceY acquisition result.
 */
	virtual void read_VarianceY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for CovarianceXY acquisition result.
 */
	virtual void read_CovarianceXY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for CorrelationXY acquisition result.
 */
	virtual void read_CorrelationXY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for SkewX acquisition result.
 */
	virtual void read_SkewX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for SkewY acquisition result.
 */
	virtual void read_SkewY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for SkewX2Y acquisition result.
 */
	virtual void read_SkewX2Y(Tango::Attribute &attr);
/**
 *	Extract real attribute values for SkewXY2 acquisition result.
 */
	virtual void read_SkewXY2(Tango::Attribute &attr);
/**
 *	Extract real attribute values for EllipseCentroidX acquisition result.
 */
	virtual void read_EllipseCentroidX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for EllipseCentroidY acquisition result.
 */
	virtual void read_EllipseCentroidY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for EllipseMajorAxis acquisition result.
 */
	virtual void read_EllipseMajorAxis(Tango::Attribute &attr);
/**
 *	Extract real attribute values for EllipseMinorAxis acquisition result.
 */
	virtual void read_EllipseMinorAxis(Tango::Attribute &attr);
/**
 *	Extract real attribute values for EllipseTilt acquisition result.
 */
	virtual void read_EllipseTilt(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfile acquisition result.
 */
	virtual void read_XProfile(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileFitted acquisition result.
 */
	virtual void read_XProfileFitted(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileError acquisition result.
 */
	virtual void read_XProfileError(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileCenter acquisition result.
 */
	virtual void read_XProfileCenter(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileMag acquisition result.
 */
	virtual void read_XProfileMag(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileSigma acquisition result.
 */
	virtual void read_XProfileSigma(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileFWHM acquisition result.
 */
	virtual void read_XProfileFWHM(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileBG acquisition result.
 */
	virtual void read_XProfileBG(Tango::Attribute &attr);
/**
 *	Extract real attribute values for XProfileChi2 acquisition result.
 */
	virtual void read_XProfileChi2(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfile acquisition result.
 */
	virtual void read_YProfile(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileFitted acquisition result.
 */
	virtual void read_YProfileFitted(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileError acquisition result.
 */
	virtual void read_YProfileError(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileCenter acquisition result.
 */
	virtual void read_YProfileCenter(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileMag acquisition result.
 */
	virtual void read_YProfileMag(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileSigma acquisition result.
 */
	virtual void read_YProfileSigma(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileFWHM acquisition result.
 */
	virtual void read_YProfileFWHM(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileBG acquisition result.
 */
	virtual void read_YProfileBG(Tango::Attribute &attr);
/**
 *	Extract real attribute values for YProfileChi2 acquisition result.
 */
	virtual void read_YProfileChi2(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitMagnitude acquisition result.
 */
	virtual void read_GaussianFitMagnitude(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitCenterX acquisition result.
 */
	virtual void read_GaussianFitCenterX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitCenterY acquisition result.
 */
	virtual void read_GaussianFitCenterY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitVarianceX acquisition result.
 */
	virtual void read_GaussianFitVarianceX(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitVarianceY acquisition result.
 */
	virtual void read_GaussianFitVarianceY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitCovarianceXY acquisition result.
 */
	virtual void read_GaussianFitCovarianceXY(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitMajorAxisFWHM acquisition result.
 */
	virtual void read_GaussianFitMajorAxisFWHM(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitMinorAxisFWHM acquisition result.
 */
	virtual void read_GaussianFitMinorAxisFWHM(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitTilt acquisition result.
 */
	virtual void read_GaussianFitTilt(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitBG acquisition result.
 */
	virtual void read_GaussianFitBG(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitChi2 acquisition result.
 */
	virtual void read_GaussianFitChi2(Tango::Attribute &attr);
/**
 *	Extract real attribute values for GaussianFitParameterCovariance acquisition result.
 */
	virtual void read_GaussianFitParameterCovariance(Tango::Attribute &attr);
/**
 *	Extract real attribute values for Fit2DNbIterMax acquisition result.
 */
	virtual void read_Fit2DNbIterMax(Tango::Attribute &attr);
/**
 *	Write Fit2DNbIterMax attribute values to hardware.
 */
	virtual void write_Fit2DNbIterMax(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Fit2DMaxRelChange acquisition result.
 */
	virtual void read_Fit2DMaxRelChange(Tango::Attribute &attr);
/**
 *	Write Fit2DMaxRelChange attribute values to hardware.
 */
	virtual void write_Fit2DMaxRelChange(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Fit1DNbIterMax acquisition result.
 */
	virtual void read_Fit1DNbIterMax(Tango::Attribute &attr);
/**
 *	Write Fit1DNbIterMax attribute values to hardware.
 */
	virtual void write_Fit1DNbIterMax(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for Fit1DMaxRelChange acquisition result.
 */
	virtual void read_Fit1DMaxRelChange(Tango::Attribute &attr);
/**
 *	Write Fit1DMaxRelChange attribute values to hardware.
 */
	virtual void write_Fit1DMaxRelChange(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for EnableImageStats attribute.
 */
	virtual bool is_EnableImageStats_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EnableProfiles attribute.
 */
	virtual bool is_EnableProfiles_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EnableUserROI attribute.
 */
	virtual bool is_EnableUserROI_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EnableAutoROI attribute.
 */
	virtual bool is_EnableAutoROI_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Enable2DGaussianFit attribute.
 */
	virtual bool is_Enable2DGaussianFit_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ComputationPeriod attribute.
 */
	virtual bool is_ComputationPeriod_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EstimComputTime attribute.
 */
	virtual bool is_EstimComputTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Rotation attribute.
 */
	virtual bool is_Rotation_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for HorizontalFlip attribute.
 */
	virtual bool is_HorizontalFlip_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for BitsPerPixel attribute.
 */
	virtual bool is_BitsPerPixel_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GammaCorrection attribute.
 */
	virtual bool is_GammaCorrection_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Threshold attribute.
 */
	virtual bool is_Threshold_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AutoROIMagFactor attribute.
 */
	virtual bool is_AutoROIMagFactor_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AlarmZone attribute.
 */
	virtual bool is_AlarmZone_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for PixelSize attribute.
 */
	virtual bool is_PixelSize_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for UserROIOriginX attribute.
 */
	virtual bool is_UserROIOriginX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for UserROIOriginY attribute.
 */
	virtual bool is_UserROIOriginY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for UserROIWidth attribute.
 */
	virtual bool is_UserROIWidth_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for UserROIHeight attribute.
 */
	virtual bool is_UserROIHeight_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AutoROIOriginX attribute.
 */
	virtual bool is_AutoROIOriginX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AutoROIOriginY attribute.
 */
	virtual bool is_AutoROIOriginY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AutoROIWidth attribute.
 */
	virtual bool is_AutoROIWidth_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for AutoROIHeight attribute.
 */
	virtual bool is_AutoROIHeight_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for NbNoiseImage attribute.
 */
	virtual bool is_NbNoiseImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for InputImage attribute.
 */
	virtual bool is_InputImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ROIImage attribute.
 */
	virtual bool is_ROIImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MeanNoiseImage attribute.
 */
	virtual bool is_MeanNoiseImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ThresholdedImage attribute.
 */
	virtual bool is_ThresholdedImage_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MaxIntensity attribute.
 */
	virtual bool is_MaxIntensity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for MeanIntensity attribute.
 */
	virtual bool is_MeanIntensity_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for CentroidX attribute.
 */
	virtual bool is_CentroidX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for CentroidY attribute.
 */
	virtual bool is_CentroidY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for VarianceX attribute.
 */
	virtual bool is_VarianceX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for VarianceY attribute.
 */
	virtual bool is_VarianceY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for CovarianceXY attribute.
 */
	virtual bool is_CovarianceXY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for CorrelationXY attribute.
 */
	virtual bool is_CorrelationXY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SkewX attribute.
 */
	virtual bool is_SkewX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SkewY attribute.
 */
	virtual bool is_SkewY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SkewX2Y attribute.
 */
	virtual bool is_SkewX2Y_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for SkewXY2 attribute.
 */
	virtual bool is_SkewXY2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EllipseCentroidX attribute.
 */
	virtual bool is_EllipseCentroidX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EllipseCentroidY attribute.
 */
	virtual bool is_EllipseCentroidY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EllipseMajorAxis attribute.
 */
	virtual bool is_EllipseMajorAxis_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EllipseMinorAxis attribute.
 */
	virtual bool is_EllipseMinorAxis_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for EllipseTilt attribute.
 */
	virtual bool is_EllipseTilt_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfile attribute.
 */
	virtual bool is_XProfile_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileFitted attribute.
 */
	virtual bool is_XProfileFitted_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileError attribute.
 */
	virtual bool is_XProfileError_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileCenter attribute.
 */
	virtual bool is_XProfileCenter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileMag attribute.
 */
	virtual bool is_XProfileMag_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileSigma attribute.
 */
	virtual bool is_XProfileSigma_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileFWHM attribute.
 */
	virtual bool is_XProfileFWHM_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileBG attribute.
 */
	virtual bool is_XProfileBG_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for XProfileChi2 attribute.
 */
	virtual bool is_XProfileChi2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfile attribute.
 */
	virtual bool is_YProfile_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileFitted attribute.
 */
	virtual bool is_YProfileFitted_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileError attribute.
 */
	virtual bool is_YProfileError_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileCenter attribute.
 */
	virtual bool is_YProfileCenter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileMag attribute.
 */
	virtual bool is_YProfileMag_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileSigma attribute.
 */
	virtual bool is_YProfileSigma_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileFWHM attribute.
 */
	virtual bool is_YProfileFWHM_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileBG attribute.
 */
	virtual bool is_YProfileBG_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for YProfileChi2 attribute.
 */
	virtual bool is_YProfileChi2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitMagnitude attribute.
 */
	virtual bool is_GaussianFitMagnitude_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitCenterX attribute.
 */
	virtual bool is_GaussianFitCenterX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitCenterY attribute.
 */
	virtual bool is_GaussianFitCenterY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitVarianceX attribute.
 */
	virtual bool is_GaussianFitVarianceX_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitVarianceY attribute.
 */
	virtual bool is_GaussianFitVarianceY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitCovarianceXY attribute.
 */
	virtual bool is_GaussianFitCovarianceXY_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitMajorAxisFWHM attribute.
 */
	virtual bool is_GaussianFitMajorAxisFWHM_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitMinorAxisFWHM attribute.
 */
	virtual bool is_GaussianFitMinorAxisFWHM_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitTilt attribute.
 */
	virtual bool is_GaussianFitTilt_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitBG attribute.
 */
	virtual bool is_GaussianFitBG_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitChi2 attribute.
 */
	virtual bool is_GaussianFitChi2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for GaussianFitParameterCovariance attribute.
 */
	virtual bool is_GaussianFitParameterCovariance_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Fit2DNbIterMax attribute.
 */
	virtual bool is_Fit2DNbIterMax_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Fit2DMaxRelChange attribute.
 */
	virtual bool is_Fit2DMaxRelChange_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Fit1DNbIterMax attribute.
 */
	virtual bool is_Fit1DNbIterMax_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for Fit1DMaxRelChange attribute.
 */
	virtual bool is_Fit1DMaxRelChange_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Process command.
 */
	virtual bool is_Process_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SaveCurrentSettings command.
 */
	virtual bool is_SaveCurrentSettings_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StartLearnNoise command.
 */
	virtual bool is_StartLearnNoise_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for StopLearnNoise command.
 */
	virtual bool is_StopLearnNoise_allowed(const CORBA::Any &any);
/**
 * [CONTINUOUS mode only] When the device is in STANDBY, this command starts the computation
 *	@exception DevFailed
 */
	void	start();
/**
 * [CONTINUOUS mode only] When the device is RUNNING, this command stops the computation
 *	@exception DevFailed
 */
	void	stop();
/**
 * [ONESHOT mode only] get an image from the specified remote device, process it and return to STANDBY state
 *	@exception DevFailed
 */
	void	process();
/**
 * stores the current configuration in the Tango database as properties
 *	@exception DevFailed
 */
	void	save_current_settings();
/**
 * 
 *	@exception DevFailed
 */
	void	start_learn_noise();
/**
 * 
 *	@exception DevFailed
 */
	void	stop_learn_noise();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
  BIAConfig current_config_;
  BIAData*  available_data_;
  BIATask*  task_;
  bool      critical_property_missing_;
  bool      properly_initialized_;
  int       device_mode_;
  bool      process_command_allowed_;

  template <typename T>
  class DummyValue
  {
    public: static T dummy;
  };

  void update_state()
  {
    if (this->properly_initialized_ == false)
    {
      //- the state and status are set up during init()
      //- just do nothing here...
    }
    else if (this->task_)
    {
      Tango::DevState state;
      std::string status;
      this->task_->get_state_status(state, status);
      
      this->set_state (state);
      this->set_status(status);
    }
  };


#define READ_OUTPUT_SCALAR_ATTR_ALWAYSACTIV( data_member, TangoType )                           \
  {	                                                                                            \
		if (this->available_data_ == 0                                                              \
         || &this->available_data_->data_member == 0)                                           \
		{                                                                                           \
			attr.set_value(&DummyValue<TangoType>::dummy);                                            \
			attr.set_quality(Tango::ATTR_ALARM);                                                      \
		}                                                                                           \
		else                                                                                        \
		{                                                                                           \
			attr.set_value(&this->available_data_->data_member);                                      \
      if (this->available_data_->alarm == true)                                                 \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
  }

#define READ_OUTPUT_SCALAR_ATTR( data_member, activated, TangoType )                            \
  {	                                                                                            \
		if (this->available_data_ == 0                                                              \
         || this->available_data_->config.activated == false                                    \
         || &this->available_data_->data_member == 0)                                           \
		{                                                                                           \
			attr.set_value(&DummyValue<TangoType>::dummy);                                            \
			attr.set_quality(Tango::ATTR_ALARM);                                                      \
		}                                                                                           \
		else                                                                                        \
		{                                                                                           \
			attr.set_value(&this->available_data_->data_member);                                      \
      if (this->available_data_->alarm == true)                                                 \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
  }

#define READ_OUTPUT_SPECTRUM_ATTR( data_member, activated, TangoType )                          \
  {	                                                                                            \
		if (this->available_data_ == 0                                                              \
         || this->available_data_->config.activated == false                                    \
         || this->available_data_->data_member.base() == 0 )                                    \
		{                                                                                           \
			attr.set_value(&DummyValue<TangoType>::dummy, 1, 0);                                      \
			attr.set_quality(Tango::ATTR_ALARM);                                                      \
		}                                                                                           \
		else                                                                                        \
		{                                                                                           \
			attr.set_value(this->available_data_->data_member.base(),                                 \
                     this->available_data_->data_member.length());                              \
      if (this->available_data_->alarm == true)                                                 \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
  }

#define READ_OUTPUT_IMAGE_ATTR_ALWAYSACTIV( data_member, TangoType )                            \
  {	                                                                                            \
		if (this->available_data_ == 0                                                              \
         || this->available_data_->data_member.base() == 0 )                                    \
		{                                                                                           \
			attr.set_value(&DummyValue<TangoType>::dummy, 1, 1);                                      \
			attr.set_quality(Tango::ATTR_ALARM);                                                      \
		}                                                                                           \
		else                                                                                        \
		{                                                                                           \
			attr.set_value(this->available_data_->data_member.base(),                                 \
                     this->available_data_->data_member.width(),                                \
                     this->available_data_->data_member.height());                              \
      if (this->available_data_->alarm == true)                                                 \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
  }

#define READ_OUTPUT_IMAGE_ATTR( data_member, activated, TangoType )                             \
  {	                                                                                            \
		if (this->available_data_ == 0                                                              \
         || this->available_data_->config.activated == false                                    \
         || this->available_data_->data_member.base() == 0 )                                    \
		{                                                                                           \
			attr.set_value(&DummyValue<TangoType>::dummy, 1, 1);                                      \
			attr.set_quality(Tango::ATTR_ALARM);                                                      \
		}                                                                                           \
		else                                                                                        \
		{                                                                                           \
			attr.set_value(this->available_data_->data_member.base(),                                 \
                     this->available_data_->data_member.width(),                                \
                     this->available_data_->data_member.height());                              \
      if (this->available_data_->alarm == true)                                                 \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
  }

#define READ_INPUT_ATTR( config_member_name )                                                   \
  {	                                                                                            \
    if (this->available_data_)                                                                  \
			attr.set_value(&this->available_data_->config.config_member_name);                        \
		else                                                                                        \
			attr.set_value(&this->current_config_.config_member_name);                                \
  }

#define READ_INPUT_ATTR_WITH_ALARM( config_member_name , alarm_boolean)                         \
  {	                                                                                            \
    if (this->available_data_)                                                                  \
    {                                                                                           \
			attr.set_value(&this->available_data_->config.config_member_name);                        \
      if (this->available_data_->alarm_boolean == true)                                         \
        attr.set_quality(Tango::ATTR_ALARM);                                                    \
      else                                                                                      \
        attr.set_quality(Tango::ATTR_VALID);                                                    \
		}                                                                                           \
		else                                                                                        \
			attr.set_value(&this->current_config_.config_member_name);                                \
  }


#define WRITE_INPUT_ATTR( config_member_name, TangoType )                                       \
  {	                                                                                            \
		if (this->task_ == 0)                                                                       \
			return;                                                                                   \
   	                                                                                            \
		TangoType value;                                                                            \
		attr.get_write_value (value);                                                               \
	 	if (value !=	this->current_config_.config_member_name)                                     \
    {                                                                                           \
      BIAConfig new_config(this->current_config_);                                              \
      new_config.config_member_name = value;                                                    \
			try                                                                                       \
			{                                                                                         \
        this->task_->configure(new_config);                                                     \
			}                                                                                         \
			catch (Tango::DevFailed &ex)                                                              \
      {                                                                                         \
				RETHROW_DEVFAILED(ex,                                                                   \
													"SOFTWARE_FAILURE",                                                   \
													"Tango error during configuration",                                   \
													"ImgBeamAnalyzer::read_" #config_member_name);                        \
      }                                                                                         \
			catch(...)                                                                                \
      {                                                                                         \
				THROW_DEVFAILED("UNKNOWN_ERROR",                                                        \
                        "Tango error during configuration",                                     \
                        "ImgBeamAnalyzer::read_" #config_member_name);                          \
      }                                                                                         \
      this->current_config_ = new_config;                                                       \
		}                                                                                           \
  }
};

}	// namespace_ns

#endif	// _IMGBEAMANALYZER_H
