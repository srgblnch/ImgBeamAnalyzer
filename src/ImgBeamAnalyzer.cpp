static const char *RcsId = "$Header: /users/chaize/newsvn/cvsroot/Calculation/ImgBeamAnalyzer/src/ImgBeamAnalyzer.cpp,v 1.1 2006-10-16 16:19:16 stephle Exp $";
//+=============================================================================
//
// file :         ImgBeamAnalyzer.cpp
//
// description :  C++ source for the ImgBeamAnalyzer and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                ImgBeamAnalyzer are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author: stephle $
//
// $Revision: 1.1 $
//
// $Log: not supported by cvs2svn $
//
// copyleft :     European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The folowing table gives the correspondance
//	between commands and method's name.
//
//  Command's name       |  Method's name
//	----------------------------------------
//  State                |  dev_state()
//  Status               |  dev_status()
//  Start                |  start()
//  Stop                 |  stop()
//  Process              |  process()
//  SaveCurrentSettings  |  save_current_settings()
//
//===================================================================


#include <ImgBeamAnalyzer.h>
#include <ImgBeamAnalyzerClass.h>

namespace ImgBeamAnalyzer_ns
{

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::ImgBeamAnalyzer(string &s)
// 
// description : 	constructor for simulated ImgBeamAnalyzer
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
ImgBeamAnalyzer::ImgBeamAnalyzer(Tango::DeviceClass *cl,string &s)
:Tango::Device_3Impl(cl,s.c_str())
{
	init_device();
}

ImgBeamAnalyzer::ImgBeamAnalyzer(Tango::DeviceClass *cl,const char *s)
:Tango::Device_3Impl(cl,s)
{
	init_device();
}

ImgBeamAnalyzer::ImgBeamAnalyzer(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_3Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::delete_device()
{
	//	Delete device's allocated object
  this->task_->abort();
  this->task_ = 0;

  if (this->available_data_)
  {
    this->available_data_->release ();
    this->available_data_ = 0;
  }
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::init_device()
{
	INFO_STREAM << "ImgBeamAnalyzer::ImgBeamAnalyzer() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
  this->available_data_ = 0;
  this->task_ = 0;
  this->critical_property_missing_ = false;
  this->properly_initialized_ = false;

  this->dummy_DevBoolean_ = false;
  this->dummy_DevUChar_   = 0;
  this->dummy_DevUShort_  = 0;
  this->dummy_DevLong_    = 0;
  this->dummy_DevDouble_  = ::sqrt(-1);


  try
  {
	  this->get_device_property();
  }
	catch (Tango::DevFailed &df)
  {
    ERROR_STREAM << (Tango::DevFailed&)df << std::endl;
    this->set_status ("Initialization error [Tango Exception caught while getting device properties]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }
  catch (...)
  {
    ERROR_STREAM << "Initialization error [Unknown Exception caught while getting device properties]" << std::endl;
    this->set_status ("Initialization error [Unknown Exception caught while getting device properties]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }

  if (this->critical_property_missing_ == true)
  {
    ERROR_STREAM << "Initialization error [unspecified critical device property]" << std::endl;
    this->set_status ("Initialization error [unspecified critical device property]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }

  if (this->mode == "oneshot")
    this->device_mode_ = MODE_ONESHOT;
  else if (mode == "continuous")
    this->device_mode_ = MODE_CONTINUOUS;
  else
  {
    ERROR_STREAM << "Initialization error [Mode property must be ONESHOT or CONTINUOUS]" << std::endl;
    this->set_status ("Initialization error [Mode property must be ONESHOT or CONTINUOUS]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }


  bool dev_proxy_allowed = true;

  if (this->device_mode_ == MODE_CONTINUOUS)
  {
    if ( this->imageDevice == "unspecified")
    {
      ERROR_STREAM << "Initialization error [ImageDevice property not set]" << std::endl;
      this->set_status ("Initialization error [ImageDevice property not set]");
      this->set_state (Tango::FAULT);
      this->delete_device();
      return;
    }
    if ( this->imageAttributeName == "unspecified")
    {
      ERROR_STREAM << "Initialization error [ImageAttributeName property not set]" << std::endl;
      this->set_status ("Initialization error [ImageAttributeName property not set]");
      this->set_state (Tango::FAULT);
      this->delete_device();
      return;
    }
    dev_proxy_allowed = true;
    
    //- in CONTINUOUS mode, 'Process' command is disabled
    this->process_command_allowed_ = false;
  }
  else
  {
    if ( this->imageDevice == "unspecified" || this->imageAttributeName == "unspecified")
    {
      //- no remote device specified : no command allowed
      //- the user must use write_InputImage
      dev_proxy_allowed = false;

      //- in ONESHOT mode, 'Process' command is disabled if a remote device is not specified
      //- In that case, the user can only use the write_InputImage method to interact with the device.
      this->process_command_allowed_ = false;
    }
    else
    {
      dev_proxy_allowed = true;
      this->process_command_allowed_ = true;
    }
  }

  // Init BIATask
	//--------------------------------------------  
  try
  {
    this->task_ = new BIATask (this,
                               this->current_config_,
                               dev_proxy_allowed,
                               this->imageDevice,
                               this->imageAttributeName,
                               this->autoStart,
                               this->device_mode_);
    if (this->task_ == 0)
      throw std::bad_alloc();

    this->task_->go();
  }
  catch (const std::bad_alloc &)
  {
    ERROR_STREAM << "std::bad_alloc caught during instantiation of DataProcessing" << std::endl;
    this->set_status ("Initialization error [OUT_OF_MEMORY exception caught while instantiating DataProcessing]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }
  catch (...)
  {
    ERROR_STREAM << "std::bad_alloc caught during instantiation of DataProcessing" << std::endl;
    this->set_status ("Initialization error [unknown exception caught while instantiating DataProcessing]");
    this->set_state (Tango::FAULT);
    this->delete_device();
    return;
  }
  
  this->properly_initialized_ = true;

  
  //- update the state
  this->always_executed_hook();

}


//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------
  this->imageDevice = "unspecified";
  this->imageAttributeName = "unspecified";
  this->autoStart = false;
  this->computationPeriod = kDEFAULT_COMPUT_PERIOD;
  this->enableImageStats = kDEFAULT_ENABLE_IMAGE_STATS;
  this->enableProfiles = kDEFAULT_ENABLE_PROFILE;
  this->enableUserROI = kDEFAULT_ENABLE_USER_ROI;
  this->enableAutoROI = kDEFAULT_ENABLE_AUTO_ROI;
  this->enable2DGaussianFit = kDEFAULT_ENABLE_2D_GAUSSIAN_FIT;
  this->mode = "unspecified";
  this->autoROIMagFactor = kDEFAULT_AUTOROI_MAGFACTOR;
  this->pixelSize = kDEFAULT_PIXELSIZE;
  this->rotation = kDEFAULT_ROTATION;
  this->horizontalFlip = kDEFAULT_HORIZONTAL_FLIP;
  this->gammaCorrection = kDEFAULT_GAMMA_CORRECTION;
  this->bitsPerPixel = kDEFAULT_PIXEL_DEPTH;

  //	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	if (Tango::Util::instance()->_UseDb==false)
		return;
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("AutoROIMagFactor"));
	dev_prop.push_back(Tango::DbDatum("AutoStart"));
	dev_prop.push_back(Tango::DbDatum("ComputationPeriod"));
	dev_prop.push_back(Tango::DbDatum("Enable2DGaussianFit"));
	dev_prop.push_back(Tango::DbDatum("EnableAutoROI"));
	dev_prop.push_back(Tango::DbDatum("EnableImageStats"));
	dev_prop.push_back(Tango::DbDatum("EnableProfiles"));
	dev_prop.push_back(Tango::DbDatum("EnableUserROI"));
	dev_prop.push_back(Tango::DbDatum("ImageAttributeName"));
	dev_prop.push_back(Tango::DbDatum("ImageDevice"));
	dev_prop.push_back(Tango::DbDatum("Mode"));
	dev_prop.push_back(Tango::DbDatum("PixelSize"));
	dev_prop.push_back(Tango::DbDatum("Rotation"));
	dev_prop.push_back(Tango::DbDatum("HorizontalFlip"));
	dev_prop.push_back(Tango::DbDatum("GammaCorrection"));
	dev_prop.push_back(Tango::DbDatum("BitsPerPixel"));

	//	Call database and extract values
	//--------------------------------------------
	get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	ImgBeamAnalyzerClass	*ds_class =
		(static_cast<ImgBeamAnalyzerClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize AutoROIMagFactor from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  autoROIMagFactor;
	//	Try to initialize AutoROIMagFactor from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  autoROIMagFactor;
	//	And try to extract AutoROIMagFactor value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  autoROIMagFactor;

	//	Try to initialize AutoStart from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  autoStart;
	//	Try to initialize AutoStart from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  autoStart;
	//	And try to extract AutoStart value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  autoStart;

	//	Try to initialize ComputationPeriod from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  computationPeriod;
	//	Try to initialize ComputationPeriod from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  computationPeriod;
	//	And try to extract ComputationPeriod value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  computationPeriod;

	//	Try to initialize Enable2DGaussianFit from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  enable2DGaussianFit;
	//	Try to initialize Enable2DGaussianFit from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  enable2DGaussianFit;
	//	And try to extract Enable2DGaussianFit value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enable2DGaussianFit;

	//	Try to initialize EnableAutoROI from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  enableAutoROI;
	//	Try to initialize EnableAutoROI from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  enableAutoROI;
	//	And try to extract EnableAutoROI value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableAutoROI;

	//	Try to initialize EnableImageStats from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  enableImageStats;
	//	Try to initialize EnableImageStats from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  enableImageStats;
	//	And try to extract EnableImageStats value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableImageStats;

	//	Try to initialize EnableProfiles from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  enableProfiles;
	//	Try to initialize EnableProfiles from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  enableProfiles;
	//	And try to extract EnableProfiles value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableProfiles;

	//	Try to initialize EnableUserROI from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  enableUserROI;
	//	Try to initialize EnableUserROI from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  enableUserROI;
	//	And try to extract EnableUserROI value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  enableUserROI;

	//	Try to initialize ImageAttributeName from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  imageAttributeName;
	//	Try to initialize ImageAttributeName from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  imageAttributeName;
	//	And try to extract ImageAttributeName value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imageAttributeName;

	//	Try to initialize ImageDevice from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  imageDevice;
	//	Try to initialize ImageDevice from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  imageDevice;
	//	And try to extract ImageDevice value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  imageDevice;

	//	Try to initialize Mode from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  mode;
	//	Try to initialize Mode from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  mode;
	//	And try to extract Mode value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  mode;

	//	Try to initialize PixelSize from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  pixelSize;
	//	Try to initialize PixelSize from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  pixelSize;
	//	And try to extract PixelSize value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  pixelSize;

	//	Try to initialize Rotation from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  rotation;
	//	Try to initialize Rotation from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  rotation;
	//	And try to extract Rotation value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rotation;

	//	Try to initialize HorizontalFlip from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  horizontalFlip;
	//	Try to initialize HorizontalFlip from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  horizontalFlip;
	//	And try to extract HorizontalFlip value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  horizontalFlip;

	//	Try to initialize GammaCorrection from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  gammaCorrection;
	//	Try to initialize GammaCorrection from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  gammaCorrection;
	//	And try to extract GammaCorrection value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  gammaCorrection;

	//	Try to initialize BitsPerPixel from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  bitsPerPixel;
	//	Try to initialize BitsPerPixel from default device value
	def_prop = ds_class->get_default_device_property(dev_prop[i].name);
	if (def_prop.is_empty()==false)	def_prop  >>  bitsPerPixel;
	//	And try to extract BitsPerPixel value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  bitsPerPixel;



	//	End of Automatic code generation
	//------------------------------------------------------------------


  std::transform(mode.begin(), mode.end(), mode.begin(), ::tolower);
  if (mode == "unspecified")
  {
    ERROR_STREAM << "required device property <Mode> is missing" << endl;
    this->critical_property_missing_ = true;
  }


  //- Build the initial configuration
	//------------------------------------------------------------------
  this->current_config_ = BIAConfig(); //- set all members to their default value

  this->current_config_.enable_image_stats = enableImageStats;
  this->current_config_.enable_profile = enableProfiles;
  this->current_config_.enable_2d_gaussian_fit = enable2DGaussianFit;
  this->current_config_.enable_auto_roi = enableAutoROI;
  this->current_config_.enable_user_roi = enableUserROI;
  this->current_config_.comput_period = computationPeriod;
  this->current_config_.pixel_size = pixelSize;
  this->current_config_.auto_roi_mag_factor = autoROIMagFactor;
  this->current_config_.rotation = rotation;
  this->current_config_.horizontal_flip = horizontalFlip;
  this->current_config_.gamma_correction = gammaCorrection;
  this->current_config_.pixel_depth = bitsPerPixel;

  //- leave the other members to their default values
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::always_executed_hook()
{
  this->update_state();
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_attr_hardware(vector<long> &attr_list)
{
#ifdef VERBOSE_RW_ATTRIBUTE
	DEBUG_STREAM << "ImgBeamAnalyzer::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
#endif
	//	Add your own code here
	
  try
  {
    //---- READ DATA ---------------------------------------------------------------------
    //- release any existing data
    if (this->available_data_)
    {
      this->available_data_->release ();
      this->available_data_ = 0;
    }

    //- read data
    //- if not available, return value will be 0
    //- we DON'T put the device in a FAULT state if data is not available
    //- but we update the status...
    this->available_data_ = this->task_->get_data ();
  }
  catch(...)
  {
    Tango::Except::throw_exception (_CPTC ("UNKNOWN_ERROR"),
                                    _CPTC ("An unknown error occured"),
                                    _CPTC ("ImgBeamAnalyzer::read_attr_hardware()"));
  }

  //- the state/status may be updated by the call to this->task_->get_data()
  this->update_state();

}
//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_BitsPerPixel
// 
// description : 	Extract real attribute values for BitsPerPixel acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_BitsPerPixel(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(pixel_depth);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_BitsPerPixel
// 
// description : 	Write BitsPerPixel attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_BitsPerPixel(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(pixel_depth, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GammaCorrection
// 
// description : 	Extract real attribute values for GammaCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GammaCorrection(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(gamma_correction);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_GammaCorrection
// 
// description : 	Write GammaCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_GammaCorrection(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(gamma_correction, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Rotation
// 
// description : 	Extract real attribute values for Rotation acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Rotation(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(rotation);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Rotation
// 
// description : 	Write Rotation attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Rotation(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(rotation, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_HorizontalFlip
// 
// description : 	Extract real attribute values for HorizontalFlip acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_HorizontalFlip(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(horizontal_flip);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_HorizontalFlip
// 
// description : 	Write HorizontalFlip attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_HorizontalFlip(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(horizontal_flip, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileFitted
// 
// description : 	Extract real attribute values for XProfileFitted acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileFitted(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_x_fitted, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileError
// 
// description : 	Extract real attribute values for XProfileError acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileError(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_x_error, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileFitted
// 
// description : 	Extract real attribute values for YProfileFitted acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileFitted(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_y_fitted, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileError
// 
// description : 	Extract real attribute values for YProfileError acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileError(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_y_error, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileFWHM
// 
// description : 	Extract real attribute values for XProfileFWHM acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileFWHM(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_fwhm, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileFWHM
// 
// description : 	Extract real attribute values for YProfileFWHM acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileFWHM(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_fwhm, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitMajorAxisFWHM
// 
// description : 	Extract real attribute values for GaussianFitMajorAxisFWHM acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitMajorAxisFWHM(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_major_axis_fwhm, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitMinorAxisFWHM
// 
// description : 	Extract real attribute values for GaussianFitMinorAxisFWHM acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitMinorAxisFWHM(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_minor_axis_fwhm, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_UserROIOriginX
// 
// description : 	Write UserROIOriginX attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_UserROIOriginX(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(user_roi_origin_x, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_UserROIOriginY
// 
// description : 	Write UserROIOriginY attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_UserROIOriginY(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(user_roi_origin_y, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_UserROIWidth
// 
// description : 	Write UserROIWidth attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_UserROIWidth(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(user_roi_width, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_UserROIHeight
// 
// description : 	Write UserROIHeight attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_UserROIHeight(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(user_roi_height, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EnableUserROI
// 
// description : 	Extract real attribute values for EnableUserROI acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EnableUserROI(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(enable_user_roi);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_EnableUserROI
// 
// description : 	Write EnableUserROI attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_EnableUserROI(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(enable_user_roi, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_UserROIOriginX
// 
// description : 	Extract real attribute values for UserROIOriginX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_UserROIOriginX(Tango::Attribute &attr)
{
  READ_INPUT_ATTR_WITH_ALARM(user_roi_origin_x, user_roi_alarm);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_UserROIOriginY
// 
// description : 	Extract real attribute values for UserROIOriginY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_UserROIOriginY(Tango::Attribute &attr)
{
  READ_INPUT_ATTR_WITH_ALARM(user_roi_origin_y, user_roi_alarm);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_UserROIWidth
// 
// description : 	Extract real attribute values for UserROIWidth acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_UserROIWidth(Tango::Attribute &attr)
{
  READ_INPUT_ATTR_WITH_ALARM(user_roi_width, user_roi_alarm);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_UserROIHeight
// 
// description : 	Extract real attribute values for UserROIHeight acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_UserROIHeight(Tango::Attribute &attr)
{
  READ_INPUT_ATTR_WITH_ALARM(user_roi_height, user_roi_alarm);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AutoROIOriginX
// 
// description : 	Extract real attribute values for AutoROIOriginX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AutoROIOriginX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(auto_roi_origin_x, enable_auto_roi, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AutoROIOriginY
// 
// description : 	Extract real attribute values for AutoROIOriginY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AutoROIOriginY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(auto_roi_origin_y, enable_auto_roi, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AutoROIWidth
// 
// description : 	Extract real attribute values for AutoROIWidth acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AutoROIWidth(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(auto_roi_width, enable_auto_roi, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AutoROIHeight
// 
// description : 	Extract real attribute values for AutoROIHeight acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AutoROIHeight(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(auto_roi_height, enable_auto_roi, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_ROIImage
// 
// description : 	Extract real attribute values for ROIImage acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_ROIImage(Tango::Attribute &attr)
{
  READ_OUTPUT_IMAGE_ATTR_ALWAYSACTIV(roi_image, Tango::DevUShort);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_PixelSize
// 
// description : 	Extract real attribute values for PixelSize acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_PixelSize(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(pixel_size);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_PixelSize
// 
// description : 	Write PixelSize attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_PixelSize(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(pixel_size, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EnableAutoROI
// 
// description : 	Extract real attribute values for EnableAutoROI acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EnableAutoROI(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(enable_auto_roi);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_EnableAutoROI
// 
// description : 	Write EnableAutoROI attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_EnableAutoROI(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(enable_auto_roi, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AutoROIMagFactor
// 
// description : 	Extract real attribute values for AutoROIMagFactor acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AutoROIMagFactor(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(auto_roi_mag_factor);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_AutoROIMagFactor
// 
// description : 	Write AutoROIMagFactor attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_AutoROIMagFactor(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(auto_roi_mag_factor, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_MaxIntensity
// 
// description : 	Extract real attribute values for MaxIntensity acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_MaxIntensity(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(max_intensity, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_CentroidX
// 
// description : 	Extract real attribute values for CentroidX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_CentroidX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(centroid_x, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_CentroidY
// 
// description : 	Extract real attribute values for CentroidY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_CentroidY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(centroid_y, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_VarianceX
// 
// description : 	Extract real attribute values for VarianceX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_VarianceX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(variance_x, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_VarianceY
// 
// description : 	Extract real attribute values for VarianceY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_VarianceY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(variance_y, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_CovarianceXY
// 
// description : 	Extract real attribute values for CovarianceXY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_CovarianceXY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(covariance_xy, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_CorrelationXY
// 
// description : 	Extract real attribute values for CorrelationXY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_CorrelationXY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(correlation_xy, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_SkewX
// 
// description : 	Extract real attribute values for SkewX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_SkewX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(skew_x, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_SkewY
// 
// description : 	Extract real attribute values for SkewY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_SkewY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(skew_y, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_SkewX2Y
// 
// description : 	Extract real attribute values for SkewX2Y acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_SkewX2Y(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(skew_x2y, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_SkewXY2
// 
// description : 	Extract real attribute values for SkewXY2 acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_SkewXY2(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(skew_xy2, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EllipseCentroidX
// 
// description : 	Extract real attribute values for EllipseCentroidX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EllipseCentroidX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(ellipse_centroid_x, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EllipseCentroidY
// 
// description : 	Extract real attribute values for EllipseCentroidY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EllipseCentroidY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(ellipse_centroid_y, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileCenter
// 
// description : 	Extract real attribute values for XProfileCenter acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileCenter(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_center, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileMag
// 
// description : 	Extract real attribute values for XProfileMag acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileMag(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_mag, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileCenter
// 
// description : 	Extract real attribute values for YProfileCenter acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileCenter(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_center, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileMag
// 
// description : 	Extract real attribute values for YProfileMag acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileMag(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_mag, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitCenterX
// 
// description : 	Extract real attribute values for GaussianFitCenterX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitCenterX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_centroid_x, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitCenterY
// 
// description : 	Extract real attribute values for GaussianFitCenterY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitCenterY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_centroid_y, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitVarianceX
// 
// description : 	Extract real attribute values for GaussianFitVarianceX acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitVarianceX(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_variance_x, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitVarianceY
// 
// description : 	Extract real attribute values for GaussianFitVarianceY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitVarianceY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_variance_y, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitCovarianceXY
// 
// description : 	Extract real attribute values for GaussianFitCovarianceXY acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitCovarianceXY(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_covariance_xy, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_InputImage
// 
// description : 	Write InputImage attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_InputImage(Tango::WAttribute &attr)
{
  READ_OUTPUT_IMAGE_ATTR_ALWAYSACTIV( input_image, Tango::DevUShort );
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileBG
// 
// description : 	Extract real attribute values for XProfileBG acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileBG(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_bg, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileBG
// 
// description : 	Extract real attribute values for YProfileBG acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileBG(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_bg, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitBG
// 
// description : 	Extract real attribute values for GaussianFitBG acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitBG(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_bg, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_AlarmZone
// 
// description : 	Extract real attribute values for AlarmZone acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_AlarmZone(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(alarm_zone);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_AlarmZone
// 
// description : 	Write AlarmZone attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_AlarmZone(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(alarm_zone, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Fit2DNbIterMax
// 
// description : 	Extract real attribute values for Fit2DNbIterMax acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Fit2DNbIterMax(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(fit2d_nb_iter);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Fit2DNbIterMax
// 
// description : 	Write Fit2DNbIterMax attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Fit2DNbIterMax(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(fit2d_nb_iter, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Fit2DMaxRelChange
// 
// description : 	Extract real attribute values for Fit2DMaxRelChange acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Fit2DMaxRelChange(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(fit2d_max_rel_change);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Fit2DMaxRelChange
// 
// description : 	Write Fit2DMaxRelChange attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Fit2DMaxRelChange(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(fit2d_max_rel_change, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Fit1DNbIterMax
// 
// description : 	Extract real attribute values for Fit1DNbIterMax acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Fit1DNbIterMax(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(fit1d_nb_iter);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Fit1DNbIterMax
// 
// description : 	Write Fit1DNbIterMax attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Fit1DNbIterMax(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(fit1d_nb_iter, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Fit1DMaxRelChange
// 
// description : 	Extract real attribute values for Fit1DMaxRelChange acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Fit1DMaxRelChange(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(fit1d_max_rel_change);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Fit1DMaxRelChange
// 
// description : 	Write Fit1DMaxRelChange attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Fit1DMaxRelChange(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(fit1d_max_rel_change, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileChi2
// 
// description : 	Extract real attribute values for XProfileChi2 acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileChi2(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_chi2, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileChi2
// 
// description : 	Extract real attribute values for YProfileChi2 acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileChi2(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_chi2, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EllipseMajorAxis
// 
// description : 	Extract real attribute values for EllipseMajorAxis acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EllipseMajorAxis(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(ellipse_major_axis, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EllipseMinorAxis
// 
// description : 	Extract real attribute values for EllipseMinorAxis acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EllipseMinorAxis(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(ellipse_minor_axis, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EllipseTilt
// 
// description : 	Extract real attribute values for EllipseTilt acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EllipseTilt(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(ellipse_tilt, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfileSigma
// 
// description : 	Extract real attribute values for XProfileSigma acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfileSigma(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_x_sigma, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfileSigma
// 
// description : 	Extract real attribute values for YProfileSigma acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfileSigma(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(profile_y_sigma, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitChi2
// 
// description : 	Extract real attribute values for GaussianFitChi2 acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitChi2(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_chi2, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitParameterCovariance
// 
// description : 	Extract real attribute values for GaussianFitParameterCovariance acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitParameterCovariance(Tango::Attribute &attr)
{
  READ_OUTPUT_IMAGE_ATTR( gaussfit_parameters_covariance, enable_2d_gaussian_fit, Tango::DevDouble );
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitMagnitude
// 
// description : 	Extract real attribute values for GaussianFitMagnitude acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitMagnitude(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_magnitude, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_GaussianFitTilt
// 
// description : 	Extract real attribute values for GaussianFitTilt acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_GaussianFitTilt(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(gaussfit_tilt, enable_2d_gaussian_fit, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Enable2DGaussianFit
// 
// description : 	Extract real attribute values for Enable2DGaussianFit acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Enable2DGaussianFit(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(enable_2d_gaussian_fit);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Enable2DGaussianFit
// 
// description : 	Write Enable2DGaussianFit attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Enable2DGaussianFit(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(enable_2d_gaussian_fit, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_ThresholdedImage
// 
// description : 	Extract real attribute values for ThresholdedImage acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_ThresholdedImage(Tango::Attribute &attr)
{
  READ_OUTPUT_IMAGE_ATTR(thresholded_image, enable_auto_roi, Tango::DevUChar);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_ComputationPeriod
// 
// description : 	Extract real attribute values for ComputationPeriod acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_ComputationPeriod(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(comput_period);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_ComputationPeriod
// 
// description : 	Write ComputationPeriod attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_ComputationPeriod(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(comput_period, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EstimComputTime
// 
// description : 	Extract real attribute values for EstimComputTime acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EstimComputTime(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR_ALWAYSACTIV(estim_comput_time, Tango::DevLong);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EnableImageStats
// 
// description : 	Extract real attribute values for EnableImageStats acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EnableImageStats(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(enable_image_stats);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_EnableImageStats
// 
// description : 	Write EnableImageStats attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_EnableImageStats(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(enable_image_stats, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_EnableProfiles
// 
// description : 	Extract real attribute values for EnableProfiles acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_EnableProfiles(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(enable_profile);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_EnableProfiles
// 
// description : 	Write EnableProfiles attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_EnableProfiles(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(enable_profile, Tango::DevBoolean);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_Threshold
// 
// description : 	Extract real attribute values for Threshold acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_Threshold(Tango::Attribute &attr)
{
  READ_INPUT_ATTR(threshold);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::write_Threshold
// 
// description : 	Write Threshold attribute values to hardware.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::write_Threshold(Tango::WAttribute &attr)
{
  WRITE_INPUT_ATTR(threshold, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_InputImage
// 
// description : 	Extract real attribute values for InputImage acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_InputImage(Tango::Attribute &attr)
{
  READ_OUTPUT_IMAGE_ATTR_ALWAYSACTIV(input_image, Tango::DevUShort);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_MeanIntensity
// 
// description : 	Extract real attribute values for MeanIntensity acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_MeanIntensity(Tango::Attribute &attr)
{
  READ_OUTPUT_SCALAR_ATTR(mean_intensity, enable_image_stats, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_XProfile
// 
// description : 	Extract real attribute values for XProfile acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_XProfile(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_x, enable_profile, Tango::DevDouble);
}

//+----------------------------------------------------------------------------
//
// method : 		ImgBeamAnalyzer::read_YProfile
// 
// description : 	Extract real attribute values for YProfile acquisition result.
//
//-----------------------------------------------------------------------------
void ImgBeamAnalyzer::read_YProfile(Tango::Attribute &attr)
{
  READ_OUTPUT_SPECTRUM_ATTR(profile_y, enable_profile, Tango::DevDouble);
}


//+------------------------------------------------------------------
/**
 *	method:	ImgBeamAnalyzer::start
 *
 *	description:	method to execute "Start"
 *	[CONTINUOUS mode only] When the device is in STANDBY, this command starts the computation
 *
 *
 */
//+------------------------------------------------------------------
void ImgBeamAnalyzer::start()
{
#ifdef VERBOSE_RW_ATTRIBUTE
	DEBUG_STREAM << "ImgBeamAnalyzer::start(): entering... !" << endl;
#endif

	//	Add your own code to control device here
  if (this->device_mode_ == MODE_ONESHOT)
  {
    Tango::Except::throw_exception (_CPTC ("OPERATION_NOT_ALLOWED"),
                                    _CPTC ("In ONESHOT mode, the 'Start' command is disabled"),
                                    _CPTC ("ImgBeamAnalyzer::stop()"));
  }

  if (this->properly_initialized_)
  {
    //- try to send a START message
    adtb::Message* msg = 0;
    try
    {
      msg = new adtb::Message(kMSG_START);
      if (msg == 0)
        throw std::bad_alloc();
    }
    catch(...)
    {
      Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                      _CPTC ("Error while creating a START message"),
                                      _CPTC ("ImgBeamAnalyzer::start()"));
    }


    //- post the message
    try
    {
      this->task_->post(msg);
    }
	  catch (const Tango::DevFailed &ex)
    {
      ERROR_STREAM << ex << std::endl;
      SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
      Tango::Except::throw_exception (_CPTC ("SOFTWARE_FAILURE"),
                                      _CPTC ("The START message has not been properly handled"),
                                      _CPTC ("ImgBeamAnalyzer::start()"));
    }
    catch(...)
    {
      SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
      Tango::Except::throw_exception (_CPTC ("SOFTWARE_FAILURE"),
                                      _CPTC ("The START message has not been properly handled"),
                                      _CPTC ("ImgBeamAnalyzer::start()"));
    }   
  }
}

//+------------------------------------------------------------------
/**
 *	method:	ImgBeamAnalyzer::stop
 *
 *	description:	method to execute "Stop"
 *	[CONTINUOUS mode only] When the device is RUNNING, this command stops the computation
 *
 *
 */
//+------------------------------------------------------------------
void ImgBeamAnalyzer::stop()
{
#ifdef VERBOSE_RW_ATTRIBUTE
	DEBUG_STREAM << "ImgBeamAnalyzer::stop(): entering... !" << endl;
#endif

	//	Add your own code to control device here
  if (this->device_mode_ == MODE_ONESHOT)
  {
    Tango::Except::throw_exception (_CPTC ("OPERATION_NOT_ALLOWED"),
                                    _CPTC ("In ONESHOT mode, the 'Stop' command is disabled"),
                                    _CPTC ("ImgBeamAnalyzer::stop()"));
  }

  
  if (this->properly_initialized_)
  {
    //- try to send a STOP message
    adtb::Message* msg = 0;
    try
    {
      msg = new adtb::Message(kMSG_STOP);
      if (msg == 0)
        throw std::bad_alloc();
    }
    catch(...)
    {
      Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                      _CPTC ("Error while creating a STOP message"),
                                      _CPTC ("ImgBeamAnalyzer::stop()"));
    }


    //- post the message
    try
    {
      this->task_->post(msg);
    }
	  catch (const Tango::DevFailed &ex)
    {
      ERROR_STREAM << ex << std::endl;
      SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
      Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                      _CPTC ("The STOP message has not been properly handled"),
                                      _CPTC ("ImgBeamAnalyzer::stop()"));
    }
    catch(...)
    {
      SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
      Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                      _CPTC ("The STOP message has not been properly handled"),
                                      _CPTC ("ImgBeamAnalyzer::stop()"));
    }   
  }


}

//+------------------------------------------------------------------
/**
 *	method:	ImgBeamAnalyzer::process
 *
 *	description:	method to execute "Process"
 *	[ONESHOT mode only] get an image from the specified remote device, process it and return to STANDBY state
 *
 *
 */
//+------------------------------------------------------------------
void ImgBeamAnalyzer::process()
{
	DEBUG_STREAM << "ImgBeamAnalyzer::process(): entering... !" << endl;

	//	Add your own code to control device here
  
  if (this->process_command_allowed_ == false)
  {
    Tango::Except::throw_exception (_CPTC ("OPERATION_NOT_ALLOWED"),
                                    _CPTC ("The current configuration does not allow the use of the 'Process' command"),
                                    _CPTC ("ImgBeamAnalyzer::process()"));
  }
  
  isl::Image* image = 0;
  try
  {
    image = this->task_->get_remote_image(true);
  }
	catch (Tango::DevFailed &ex)
  {
    ERROR_STREAM << ex << std::endl;
    Tango::Except::re_throw_exception (ex,
                                       _CPTC ("SOFTWARE_FAILURE"),
                                       _CPTC ("Error while PROCESS command"),
                                       _CPTC ("ImgBeamAnalyzer::process()"));
  }
	catch (...)
  {
    Tango::Except::throw_exception (_CPTC ("SOFTWARE_FAILURE"),
                                    _CPTC ("Error while PROCESS command"),
                                    _CPTC ("ImgBeamAnalyzer::process()"));
  }



  adtb::Message* msg = 0;
  try
  {
    msg = new adtb::Message(kMSG_PROCESS);
    if (msg == 0)
      throw std::bad_alloc();
  }
  catch(...)
  {
    SAFE_DELETE_PTR( image );
    Tango::Except::throw_exception (_CPTC ("OUT_OF_MEMORY"),
                                    _CPTC ("Allocation of a adtb::Message failed"),
                                    _CPTC ("ImgBeamAnalyzer::process()"));
  }

  try
  {
    msg->attach_data(image);
  }
  catch (Tango::DevFailed &ex)
  {
    SAFE_DELETE_PTR( image );
    SAFE_DELETE_PTR( msg );
    ERROR_STREAM << ex << std::endl;
    Tango::Except::re_throw_exception (ex,
                                       _CPTC ("SOFTWARE_FAILURE"),
                                       _CPTC ("Attaching isl::Image to a adtb::Message failed"),
                                       _CPTC ("ImgBeamAnalyzer::process()"));
  }
  catch(...)
  {
    SAFE_DELETE_PTR( image );
    SAFE_DELETE_PTR( msg );
    Tango::Except::throw_exception (_CPTC ("SOFTWARE_FAILURE"),
                                    _CPTC ("Attaching isl::Image to a adtb::Message failed"),
                                    _CPTC ("ImgBeamAnalyzer::process()"));
  }

  //- post the message
  try
  {
    this->task_->post(msg);
  }
	catch (Tango::DevFailed &ex)
  {
    SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
    ERROR_STREAM << ex << std::endl;
    Tango::Except::re_throw_exception (ex,
                                       _CPTC ("SOFTWARE_FAILURE"),
                                       _CPTC ("The posting of a adtb::Message failed"),
                                       _CPTC ("ImgBeamAnalyzer::process()"));
  }
  catch(...)
  {
    SAFE_DELETE_PTR( msg ); //- will automatically delete the associated image
    Tango::Except::throw_exception (_CPTC ("SOFTWARE_FAILURE"),
                                    _CPTC ("The posting of a adtb::Message failed"),
                                    _CPTC ("ImgBeamAnalyzer::process()"));
  }


}

//+------------------------------------------------------------------
/**
 *	method:	ImgBeamAnalyzer::save_current_settings
 *
 *	description:	method to execute "SaveCurrentSettings"
 *	stores the current configuration in the Tango database as properties
 *
 *
 */
//+------------------------------------------------------------------
void ImgBeamAnalyzer::save_current_settings()
{
	DEBUG_STREAM << "ImgBeamAnalyzer::save_current_settings(): entering... !" << endl;

	//	Add your own code to control device here
	Tango::DbData	data;

# define ADD_DATUM( name, config_member ) \
  { \
    Tango::DbDatum datum( #name ); \
    datum << config_member; \
    data.push_back(datum); \
  }

  ADD_DATUM( AutoROIMagFactor,    this->current_config_.auto_roi_mag_factor );
  ADD_DATUM( ComputationPeriod,   this->current_config_.comput_period );
  ADD_DATUM( Enable2DGaussianFit, this->current_config_.enable_2d_gaussian_fit );
  ADD_DATUM( EnableAutoROI,       this->current_config_.enable_auto_roi );
  ADD_DATUM( EnableImageStats,    this->current_config_.enable_image_stats );
  ADD_DATUM( EnableProfiles,      this->current_config_.enable_profile );
  ADD_DATUM( EnableUserROI,       this->current_config_.enable_user_roi );
  ADD_DATUM( PixelSize,           this->current_config_.pixel_size );
  ADD_DATUM( Rotation,            this->current_config_.rotation );
  ADD_DATUM( HorizontalFlip,      this->current_config_.horizontal_flip );
  ADD_DATUM( GammaCorrection,     this->current_config_.gamma_correction );
  ADD_DATUM( BitsPerPixel,        this->current_config_.pixel_depth );

# undef ADD_DATUM

  try 
  {
    //- write properties to tango database
	  this->get_db_device()->put_property(data);
  }
  catch (Tango::DevFailed& ex)
  {
    ERROR_STREAM << ex << endl;
    //- rethrow exception
    Tango::Except::re_throw_exception(
            ex,
            static_cast<const char*>("put_property failed"),
				    static_cast<const char*>("Could not save current device settings into TANGO database"),
				    static_cast<const char*>("ImgBeamAnalyzer::set_device_property"));
  }
  catch(...)
  {
    //- rethrow exception
    Tango::Except::throw_exception(
            static_cast<const char*>("put_property failed"),
				    static_cast<const char*>("Could not save current device settings into TANGO database"),
				    static_cast<const char*>("ImgBeamAnalyzer::set_device_property"));
  }

}

}	//	namespace
